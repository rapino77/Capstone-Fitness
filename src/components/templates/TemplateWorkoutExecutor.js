import React, { useState, useEffect } from 'react';\nimport { format } from 'date-fns';\nimport axios from 'axios';\n\nconst TemplateWorkoutExecutor = ({ templateName, workout, onClose, onSuccess }) => {\n  const [exerciseData, setExerciseData] = useState({});\n  const [completedSets, setCompletedSets] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [submitMessage, setSubmitMessage] = useState({ type: '', text: '' });\n\n  // Initialize exercise data when component mounts\n  useEffect(() => {\n    const initialData = {};\n    const initialSets = {};\n    \n    workout.exercises.forEach((exercise, index) => {\n      initialData[index] = {\n        sets: exercise.sets,\n        reps: exercise.reps.toString().split('-')[0] || '10',\n        weight: 0\n      };\n      initialSets[index] = new Array(exercise.sets).fill(0);\n    });\n    \n    setExerciseData(initialData);\n    setCompletedSets(initialSets);\n  }, [workout.exercises]);\n\n  const handleExerciseDataChange = (exerciseIndex, field, value) => {\n    setExerciseData(prev => ({\n      ...prev,\n      [exerciseIndex]: {\n        ...prev[exerciseIndex],\n        [field]: value\n      }\n    }));\n    \n    if (field === 'sets') {\n      setCompletedSets(prev => ({\n        ...prev,\n        [exerciseIndex]: new Array(parseInt(value) || 0).fill(0)\n      }));\n    }\n  };\n\n  const handleSetComplete = (exerciseIndex, setIndex) => {\n    const targetReps = parseInt(exerciseData[exerciseIndex]?.reps) || 0;\n    \n    setCompletedSets(prev => {\n      const exerciseSets = [...(prev[exerciseIndex] || [])];\n      exerciseSets[setIndex] = exerciseSets[setIndex] === targetReps ? 0 : targetReps;\n      \n      return {\n        ...prev,\n        [exerciseIndex]: exerciseSets\n      };\n    });\n  };\n\n  const SetCircle = ({ exerciseIndex, setIndex, reps, targetReps, isCompleted, isActive, onClick }) => (\n    <button\n      type=\"button\"\n      onClick={() => onClick(exerciseIndex, setIndex)}\n      disabled={!isActive}\n      className={`w-14 h-14 rounded-full flex items-center justify-center text-sm font-bold transition-all border-2 ${\n        isCompleted \n          ? 'bg-blue-600 text-white border-blue-500 shadow-lg' \n          : isActive \n            ? 'bg-blue-100 text-blue-800 border-blue-300 hover:bg-blue-200' \n            : 'bg-gray-100 text-gray-400 border-gray-300 cursor-not-allowed'\n      }`}\n    >\n      {reps || targetReps}\n    </button>\n  );\n\n  const renderSetCircles = (exerciseIndex) => {\n    const exerciseSets = completedSets[exerciseIndex] || [];\n    const targetReps = parseInt(exerciseData[exerciseIndex]?.reps) || 0;\n    \n    return (\n      <div className=\"flex flex-wrap gap-2 justify-center\">\n        {exerciseSets.map((reps, setIndex) => {\n          const isCompleted = reps > 0;\n          const isActive = setIndex === 0 || exerciseSets[setIndex - 1] > 0;\n          \n          return (\n            <SetCircle\n              key={setIndex}\n              exerciseIndex={exerciseIndex}\n              setIndex={setIndex}\n              reps={reps}\n              targetReps={targetReps}\n              isCompleted={isCompleted}\n              isActive={isActive}\n              onClick={handleSetComplete}\n            />\n          );\n        })}\n      </div>\n    );\n  };\n\n  const getCompletedSetsCount = (exerciseIndex) => {\n    const exerciseSets = completedSets[exerciseIndex] || [];\n    return exerciseSets.filter(reps => reps > 0).length;\n  };\n\n  const getTotalCompletedSets = () => {\n    return Object.values(completedSets).reduce((total, exerciseSets) => {\n      return total + exerciseSets.filter(reps => reps > 0).length;\n    }, 0);\n  };\n\n  const handleSubmitWorkout = async () => {\n    setIsSubmitting(true);\n    setSubmitMessage({ type: '', text: '' });\n\n    try {\n      const promises = [];\n      let totalExercisesLogged = 0;\n\n      for (let i = 0; i < workout.exercises.length; i++) {\n        const exercise = workout.exercises[i];\n        const data = exerciseData[i];\n        const sets = completedSets[i] || [];\n        const completedSetsCount = sets.filter(reps => reps > 0).length;\n\n        if (completedSetsCount > 0 && data?.weight !== undefined) {\n          const avgReps = Math.round(sets.reduce((a, b) => a + b, 0) / completedSetsCount);\n          \n          const workoutData = {\n            exercise: exercise.name,\n            sets: completedSetsCount,\n            reps: avgReps,\n            weight: parseFloat(data.weight) || 0,\n            date: format(new Date(), 'yyyy-MM-dd'),\n            userId: 'default-user',\n            notes: `Template: ${templateName} - ${workout.name}`\n          };\n\n          promises.push(\n            axios.post(`${process.env.REACT_APP_API_URL}/log-workout`, workoutData)\n          );\n          totalExercisesLogged++;\n        }\n      }\n\n      if (promises.length === 0) {\n        setSubmitMessage({ \n          type: 'error', \n          text: 'Please complete at least one set and enter weights to save your workout.' \n        });\n        return;\n      }\n\n      const results = await Promise.all(promises);\n      const successCount = results.filter(r => r.data.success).length;\n\n      if (successCount === promises.length) {\n        setSubmitMessage({ \n          type: 'success', \n          text: `${templateName} workout completed! ${totalExercisesLogged} exercises logged successfully.` \n        });\n        \n        if (onSuccess) {\n          onSuccess({ \n            success: true, \n            exercisesLogged: totalExercisesLogged,\n            setsCompleted: getTotalCompletedSets(),\n            templateName,\n            workoutName: workout.name\n          });\n        }\n\n        setTimeout(() => {\n          onClose();\n        }, 2000);\n      } else {\n        setSubmitMessage({ \n          type: 'error', \n          text: `Partially saved: ${successCount}/${promises.length} exercises saved successfully.` \n        });\n      }\n\n    } catch (error) {\n      console.error('Failed to save template workout:', error);\n      setSubmitMessage({ \n        type: 'error', \n        text: error.response?.data?.error || 'Failed to save workout. Please try again.' \n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"bg-gradient-to-r from-blue-600 to-green-600 text-white p-6\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h3 className=\"text-2xl font-bold\">{workout.name}</h3>\n              <p className=\"text-blue-100\">from {templateName}</p>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-sm text-blue-100\">\n                {getTotalCompletedSets()} sets completed\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"p-6\">\n          {submitMessage.text && (\n            <div className={`p-4 rounded-lg mb-6 ${\n              submitMessage.type === 'success' \n                ? 'bg-green-50 text-green-800 border border-green-200' \n                : 'bg-red-50 text-red-800 border border-red-200'\n            }`}>\n              {submitMessage.text}\n            </div>\n          )}\n\n          <div className=\"space-y-6 mb-6\">\n            {workout.exercises.map((exercise, index) => {\n              const data = exerciseData[index] || {};\n              const completedCount = getCompletedSetsCount(index);\n              \n              return (\n                <div key={index} className=\"border-l-4 border-l-blue-500 bg-blue-50 pl-4 py-4 rounded-r-lg\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div>\n                      <h4 className=\"text-lg font-semibold text-gray-800\">{exercise.name}</h4>\n                      <p className=\"text-sm text-gray-600\">\n                        Target: {exercise.sets} sets × {exercise.reps} reps\n                        {completedCount > 0 && (\n                          <span className=\"ml-2 text-blue-600 font-medium\">\n                            • {completedCount}/{exercise.sets} completed\n                          </span>\n                        )}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-3 gap-3 mb-4\">\n                    <div>\n                      <label className=\"block text-xs font-medium text-gray-700 mb-1\">Sets</label>\n                      <input\n                        type=\"number\"\n                        min=\"1\"\n                        value={data.sets || exercise.sets}\n                        onChange={(e) => handleExerciseDataChange(index, 'sets', e.target.value)}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium text-gray-700 mb-1\">Reps</label>\n                      <input\n                        type=\"number\"\n                        min=\"1\"\n                        value={data.reps || exercise.reps.toString().split('-')[0]}\n                        onChange={(e) => handleExerciseDataChange(index, 'reps', e.target.value)}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium text-gray-700 mb-1\">Weight (lbs)</label>\n                      <input\n                        type=\"number\"\n                        step=\"0.5\"\n                        min=\"0\"\n                        value={data.weight || ''}\n                        onChange={(e) => handleExerciseDataChange(index, 'weight', e.target.value)}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm\"\n                        placeholder=\"0\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"bg-white bg-opacity-50 rounded-lg p-3\">\n                    <div className=\"text-center mb-2\">\n                      <span className=\"text-sm text-gray-600\">\n                        Tap circles to track sets • {completedCount}/{data.sets || exercise.sets} completed\n                      </span>\n                    </div>\n                    {renderSetCircles(index)}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n\n          <div className=\"flex justify-between items-center pt-4 border-t\">\n            <button\n              onClick={onClose}\n              className=\"px-6 py-3 border border-gray-300 rounded-md hover:bg-gray-50 transition-colors\"\n            >\n              Cancel\n            </button>\n            \n            <button\n              onClick={handleSubmitWorkout}\n              disabled={isSubmitting || getTotalCompletedSets() === 0}\n              className=\"px-6 py-3 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed font-semibold\"\n            >\n              {isSubmitting ? 'Saving...' : `Complete Workout (${getTotalCompletedSets()} sets)`}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TemplateWorkoutExecutor;